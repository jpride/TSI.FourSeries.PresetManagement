namespace TSI.FourSeries.DisplayPresetManagement
{
    using Crestron.SimplSharp;
    using Newtonsoft.Json;
    using System;


    public class DisplayPresetManagement
    {
        private DisplayPresetListObject _displayPresetListObj = new DisplayPresetListObject();

        private string _filecontents;
        private string _filelocation;


        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayPresetManagement"/> class.
        /// </summary>
        public DisplayPresetManagement()
        {

        }

        // This is the event to raise when a preset is parsed out. Simpl+ is monitoring this event
        public event EventHandler<PresetListLoadedEventArgs> PresetListLoadedEventToCall;


        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        public string FileLocation
        {
            get { return this._filelocation; }
            set { this._filelocation = value; }
        }

        /// <summary>
        /// this method is the only one exposed to simpl+ because it is public and the others are private. This method, when successful in reading the file, will in turn, call the others, so it need not be exposed.
        /// </summary>
        public void Initialize()
        {
            if (FileOperations.CheckFileExists(_filelocation))
            {
                _filecontents = FileOperations.ReadFile(_filelocation);
                CrestronConsole.PrintLine("fileContents: {0}", _filecontents.ToString());
            }
            else
            {
                if (Debug.debugEnable) CrestronConsole.PrintLine(Constants.FileNotFoundCreatingNewFileMessage, _filelocation);

                //create a default json string
                try
                {
                    string jsonTemplate = Constants.DefaultFileContents;
                    if (Debug.debugEnable) CrestronConsole.PrintLine(jsonTemplate);

                    //Write default string to file
                    FileOperations.WriteFile(_filelocation, jsonTemplate);

                    //Read file
                    _filecontents = FileOperations.ReadFile(_filelocation);

                }
                catch (Exception ex)
                {
                    CrestronConsole.PrintLine(Constants.InitializeExceptionMessage, ex.Message);
                }
            }

            DeserializeJSON();
        }

        public void SetDebug(ushort flag)
        { 
            Debug.SetDebug(flag);
        }

        /// <summary>
        /// the following two methods were added 11-2-21 and tested on 11-8-21
        /// OverwritePreset will overwrite the preset info for a given index.
        /// WriteLocalListToFile() will write the updated preset list to the file.
        /// </summary>
        public void OverwritePreset(ushort index, string newInput, ushort newStream, string newChannelNumber,string newChannelName)
        {
            Preset preset = new Preset()
            {
                input = newInput,
                stream = newStream,
                channelNumber = newChannelNumber,
                channelName = newChannelName
            };

            try
            {
                if (index < _displayPresetListObj.PresetList.Count)
                {
                    _displayPresetListObj.PresetList[index] = preset;
                }
                else
                {
                    _displayPresetListObj.PresetList.Add(preset);
                }
            }
            catch (Exception e)
            {
                CrestronConsole.PrintLine(Constants.OverwritePresetExceptionStackTrace, e.Message);
            }
        }

        /// <summary>
        /// Write the List to file
        /// </summary>
        public void WriteLocalListToFile()
        {
            var UpdatedJson = JsonConvert.SerializeObject(_displayPresetListObj);
            FileOperations.WriteFile(_filelocation, UpdatedJson);
        }

        /// <summary>
        /// This method is called after the file is successfully read. It will deserialize the file contents into a collection of objects. These objects are difined in the "Structures.cs" class. 
        /// The objects in structures.cs can be automatically generated by running your json file through www.json2csharp.com.
        /// </summary>
        private void DeserializeJSON()
        {
            try
            {
                if (!_filecontents.Equals(String.Empty) && !_filecontents.Equals(null))
                {
                    _displayPresetListObj = JsonConvert.DeserializeObject<DisplayPresetListObject>(_filecontents);
                    GetPresetListFromFile();
                }
                else
                {
                    CrestronConsole.PrintLine(Constants.NothingToDeserializeMessage);
                }
            }
            catch (Exception e)
            {
                ErrorLog.Error(Constants.ErrorConvertingFileContentsMessage, _filecontents, e.Message);
                CrestronConsole.PrintLine(Constants.ErrorConvertingFileContentsMessage, _filecontents, e.Message);
            }
        }


        /// <summary>
        /// This is a generic type of event in which we loop thru whatever object is in the json file. As we loop, we populate a custom Eventargs and then raise an event with those EventArgs. This event 
        /// is monitored by simpl+ and serves as our means of receiving the pertinent info from this class.
        /// </summary>
        private void GetPresetListFromFile()
        {

            if (!_displayPresetListObj.PresetList.Count.Equals(0))
            {
                try
                {
                    //for loop to iterate through presets
                    for (int i = 0; i < _displayPresetListObj.PresetList.Count; i++)
                    {
                        //create empty event args of type pwListCodeEventArgs
                        PresetListLoadedEventArgs args = new PresetListLoadedEventArgs()
                        {
                            presetindex = (ushort)(i + 1),
                            presetinput = _displayPresetListObj.PresetList[i].input,
                            presetstream = _displayPresetListObj.PresetList[i].stream,
                            presetchannelnumber = _displayPresetListObj.PresetList[i].channelNumber,
                            presetchannelname = _displayPresetListObj.PresetList[i].channelName
                        };

                        //call eventhandler
                        if (!PresetListLoadedEventToCall.Equals(null))
                        {
                            PresetListLoadedEventToCall(this, args);
                        }
                    }
                }
                catch (Exception e)
                {
                    CrestronConsole.PrintLine(Constants.GetPresetListFromFileExceptionStackTrace, e.Message);
                }
            }
        }



    }





}
